/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.Person;
import model.Encounter;
import model.PatientDirectory;
import model.VitalSigns;

/**
 *
 * @author vigneshguna
 */
public class DashboardJPanel extends javax.swing.JPanel {
    
    PatientDirectory patientDirectory;
    
    ButtonGroup bpGroup;
    ButtonGroup tempGroup;
    ButtonGroup breathGroup;
    ButtonGroup pulseGroup;
    
    List<String> communitySelection = new ArrayList<String>();
    List<String> ageSelection = new ArrayList<String>();
    Set<Patient> finalList;
    
    DashboardJPanel(PatientDirectory patientDirectory) {
        initComponents();
        
        this.patientDirectory = patientDirectory;
        
        bpGroup = new ButtonGroup();
        bpGroup.add(radioNBP);
        bpGroup.add(radioANBP);
        tempGroup = new ButtonGroup();
        tempGroup.add(radioNTemp);
        tempGroup.add(radioANTemp);
        breathGroup = new ButtonGroup();
        breathGroup.add(radioNBreat);
        breathGroup.add(radioANBreat);
        pulseGroup = new ButtonGroup();
        pulseGroup.add(radioNPulse);
        pulseGroup.add(radioANPulse);
        
        finalList = new LinkedHashSet<Patient>(patientDirectory.getPatientsFullList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFiltered = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        radioNBP = new javax.swing.JRadioButton();
        radioANBP = new javax.swing.JRadioButton();
        radioNTemp = new javax.swing.JRadioButton();
        radioANTemp = new javax.swing.JRadioButton();
        radioNBreat = new javax.swing.JRadioButton();
        radioANBreat = new javax.swing.JRadioButton();
        radioNPulse = new javax.swing.JRadioButton();
        radioANPulse = new javax.swing.JRadioButton();
        btnClearBp = new javax.swing.JButton();
        btnClearTemp = new javax.swing.JButton();
        btnClearBrea = new javax.swing.JButton();
        btnClearPulse = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnClearFilter = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        btnApply = new javax.swing.JButton();
        chkAsian = new javax.swing.JCheckBox();
        chkLatino = new javax.swing.JCheckBox();
        chkAmerican = new javax.swing.JCheckBox();
        chkAfrican = new javax.swing.JCheckBox();
        chkCanadian = new javax.swing.JCheckBox();
        chk019 = new javax.swing.JCheckBox();
        chkAbove60 = new javax.swing.JCheckBox();
        chk5160 = new javax.swing.JCheckBox();
        chk3140 = new javax.swing.JCheckBox();
        chk4150 = new javax.swing.JCheckBox();
        chk2030 = new javax.swing.JCheckBox();

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 153, 0));
        lblTitle.setText("Dashboard");

        jLabel4.setFont(new java.awt.Font("Marker Felt", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 153, 0));
        jLabel4.setText("ABC Hospitals");

        tblFiltered.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Age", "House", "City", "Contact", "Community", "Visit Date", "Doctor", "Breathing (breaths per minute)", "Pulse (beats per minute)", "Temperature (°F)", "Blood Pressure (mm Hg)", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFiltered);

        jLabel10.setText("Patient's Filtered List :");

        jLabel6.setText("Community :");

        jLabel7.setText("Age Group :");

        jLabel8.setText("Blood Pressure :");

        jLabel9.setText("Temperature :");

        jLabel11.setText("Breathing :");

        jLabel12.setText("Pulse :");

        radioNBP.setText("Normal");
        radioNBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNBPActionPerformed(evt);
            }
        });

        radioANBP.setText("Abnormal");
        radioANBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioANBPActionPerformed(evt);
            }
        });

        radioNTemp.setText("Normal");
        radioNTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNTempActionPerformed(evt);
            }
        });

        radioANTemp.setText("Abnormal");
        radioANTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioANTempActionPerformed(evt);
            }
        });

        radioNBreat.setText("Normal");
        radioNBreat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNBreatActionPerformed(evt);
            }
        });

        radioANBreat.setText("Abnormal");
        radioANBreat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioANBreatActionPerformed(evt);
            }
        });

        radioNPulse.setText("Normal");
        radioNPulse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNPulseActionPerformed(evt);
            }
        });

        radioANPulse.setText("Abnormal");
        radioANPulse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioANPulseActionPerformed(evt);
            }
        });

        btnClearBp.setText("clear this selection");
        btnClearBp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearBpActionPerformed(evt);
            }
        });

        btnClearTemp.setText("clear this selection");
        btnClearTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTempActionPerformed(evt);
            }
        });

        btnClearBrea.setText("clear this selection");
        btnClearBrea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearBreaActionPerformed(evt);
            }
        });

        btnClearPulse.setText("clear this selection");
        btnClearPulse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearPulseActionPerformed(evt);
            }
        });

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnClearFilter.setText("Clear Filters");
        btnClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFilterActionPerformed(evt);
            }
        });

        jTextPane1.setText("Normal values:\nBlood pressure: 90/60 mm Hg to 120/80 mm Hg\nTemperature: 97.8°F to 99.1°F (36.5°C to 37.3°C)\nBreathing: 12 to 18 breaths per minute\nPulse: 60 to 100 beats per minute\n\nAbnormal Values:\nanything lower/higher from the mentioned above");
        jScrollPane2.setViewportView(jTextPane1);

        btnApply.setText("Apply Filters");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        chkAsian.setText("Asian");

        chkLatino.setText("Latino");

        chkAmerican.setText("American");

        chkAfrican.setText("African");

        chkCanadian.setText("Canadian");

        chk019.setText("0 to 19");

        chkAbove60.setText("above 60");

        chk5160.setText("51 to 60");

        chk3140.setText("31 to 40");

        chk4150.setText("41 to 50");

        chk2030.setText("20 to 30");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkLatino)
                        .addGap(18, 18, 18)
                        .addComponent(chkCanadian)
                        .addGap(18, 18, 18)
                        .addComponent(chkAfrican)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(99, 99, 99))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel10)
                                .addGap(65, 65, 65)
                                .addComponent(btnApply)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel12))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(radioNPulse)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radioANPulse)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnClearPulse))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(radioNTemp)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(radioANTemp))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(radioNBP)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(radioANBP))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(radioNBreat)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(radioANBreat)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnClearBp)
                                                    .addComponent(btnClearBrea)
                                                    .addComponent(btnClearTemp)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(chkAsian)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chkAmerican)
                                                .addGap(271, 271, 271)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(chk019)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chk2030)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chk3140)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chk4150)
                                                .addGap(18, 18, 18)
                                                .addComponent(chk5160)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chkAbove60))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(303, 303, 303)
                                .addComponent(btnPrint)
                                .addGap(60, 60, 60)
                                .addComponent(btnClearFilter)))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addComponent(jLabel4))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chkAsian)
                    .addComponent(chkAmerican)
                    .addComponent(chkLatino)
                    .addComponent(chkCanadian)
                    .addComponent(chkAfrican))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chk019)
                        .addComponent(chk2030)
                        .addComponent(chk3140)
                        .addComponent(chk4150)
                        .addComponent(chk5160)
                        .addComponent(chkAbove60)))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(radioNBP)
                            .addComponent(radioANBP)
                            .addComponent(btnClearBp))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(radioNTemp)
                            .addComponent(radioANTemp)
                            .addComponent(btnClearTemp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(radioNBreat)
                            .addComponent(radioANBreat)
                            .addComponent(btnClearBrea))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(radioNPulse)
                            .addComponent(radioANPulse)
                            .addComponent(btnClearPulse)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnApply)
                        .addGap(18, 46, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrint)
                    .addComponent(btnClearFilter))
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioNBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNBPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioNBPActionPerformed

    private void radioANBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioANBPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioANBPActionPerformed

    private void radioNTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNTempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioNTempActionPerformed

    private void radioANTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioANTempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioANTempActionPerformed

    private void radioNBreatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNBreatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioNBreatActionPerformed

    private void radioANBreatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioANBreatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioANBreatActionPerformed

    private void radioNPulseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNPulseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioNPulseActionPerformed

    private void radioANPulseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioANPulseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioANPulseActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblFiltered.getModel();
        model.setRowCount(0);
        communitySelection.clear();
        ageSelection.clear();
        finalList.clear();
        
        getFilters();
        Set<Patient> temp = new LinkedHashSet<Patient>(applyFilters());
        
        populateFilterTable(temp);
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        JOptionPane.showMessageDialog(this, "This Dashboard Report is sent to your printer!");
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnClearBpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearBpActionPerformed
        bpGroup.clearSelection();
    }//GEN-LAST:event_btnClearBpActionPerformed

    private void btnClearTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTempActionPerformed
        tempGroup.clearSelection();
    }//GEN-LAST:event_btnClearTempActionPerformed

    private void btnClearBreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearBreaActionPerformed
        breathGroup.clearSelection();
    }//GEN-LAST:event_btnClearBreaActionPerformed

    private void btnClearPulseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearPulseActionPerformed
        pulseGroup.clearSelection();
    }//GEN-LAST:event_btnClearPulseActionPerformed

    private void btnClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFilterActionPerformed
        
        chkAsian.setSelected(false);
        chkAmerican.setSelected(false);
        chkLatino.setSelected(false);
        chkCanadian.setSelected(false);
        chkAfrican.setSelected(false);
        
        chk019.setSelected(false);
        chk2030.setSelected(false);
        chk3140.setSelected(false);
        chk4150.setSelected(false);
        chk5160.setSelected(false);
        chkAbove60.setSelected(false);
        
        communitySelection.clear();
        ageSelection.clear();
        
        bpGroup.clearSelection();
        tempGroup.clearSelection();
        breathGroup.clearSelection();
        pulseGroup.clearSelection();
        
        DefaultTableModel model = (DefaultTableModel) tblFiltered.getModel();
        model.setRowCount(0);
        
        finalList.clear();
    }//GEN-LAST:event_btnClearFilterActionPerformed
    private void getFilters() {
        
        if (chkAsian.isSelected()) {
            communitySelection.add("Asian");
        }
        if (chkAmerican.isSelected()) {
            communitySelection.add("American");
        }
        if (chkLatino.isSelected()) {
            communitySelection.add("Latino");
        }
        if (chkCanadian.isSelected()) {
            communitySelection.add("Canadian");
        }
        if (chkAfrican.isSelected()) {
            communitySelection.add("African");
        }
       
        //----
        if (chk019.isSelected()) {
            ageSelection.add("0 19");
        }
        if (chk2030.isSelected()) {
            ageSelection.add("20 30");
        }
        if (chk3140.isSelected()) {
            ageSelection.add("31 40");
        }
        if (chk4150.isSelected()) {
            ageSelection.add("41 50");
        }
        if (chk5160.isSelected()) {
            ageSelection.add("51 60");
        }
        if (chkAbove60.isSelected()) {
            ageSelection.add("61 200");
        }
    }
    private Set<Patient> applyFilters() {
        Set<Patient> temp = new LinkedHashSet<Patient>(patientDirectory.getPatientsFullList());
        
        temp = new LinkedHashSet<Patient>(filterCommunity(temp));
        temp = new LinkedHashSet<Patient>(filterAge(temp));
        temp = new LinkedHashSet<Patient>(filterBP(temp));
        temp = new LinkedHashSet<Patient>(filterTemp(temp));
        temp = new LinkedHashSet<Patient>(filterBreath(temp));
        temp = new LinkedHashSet<Patient>(filterPulse(temp));
        
        return temp;
    }
    
    private Set<Patient> filterCommunity(Set<Patient> temp) {
        if (!communitySelection.isEmpty()) {
            for (Patient pat : temp) {
                //add
                if (communitySelection.contains(pat.getPerson().getCommunity())) {
                    //add
                    if (!finalList.contains(pat)) {
                           finalList.add(pat);
                    }
                }
                //dont add, remove
                else if (finalList.contains(pat)) {
                    finalList.remove(pat);
                }
            }
        }
        
        return finalList.isEmpty()? temp : finalList;
    }
    private Set<Patient> filterAge(Set<Patient> temp) {
        if (!ageSelection.isEmpty()) {
            for (Patient pat : temp) {
                boolean toBeAdded = false;
                for (String string : ageSelection) {
                    String num[] = string.split(" ");
                    if (Integer.parseInt(num[0]) <= pat.getPerson().getAge() && pat.getPerson().getAge() <= Integer.parseInt(num[1])) {
                        toBeAdded = true;
                    }
                }
                if (toBeAdded) {
                    //add
                    if (!finalList.contains(pat)) {
                        finalList.add(pat);
                    }
                } else {
                    //dont add, remove
                    if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                }
            }
        }
        
        return finalList.isEmpty()? temp : finalList;
    }
    private Set<Patient> filterBP(Set<Patient> temp) {
        if (bpGroup.getSelection() != null) {
            for (Patient pat : temp) {
                //last entry is chosen
                Encounter e = new ArrayList<>(pat.getVisit().keySet()).get(pat.getVisit().size() - 1);
                VitalSigns v = new ArrayList<>(pat.getVisit().values()).get(pat.getVisit().size() - 1);
                //if ("Normal".equals(bpGroup.getSelection().getActionCommand())) {
                if (radioNBP.isSelected()) {
                    if ((90 <= v.getSystolic() && v.getSystolic() <= 120) && (60 <= v.getDiastolic() && v.getDiastolic() <= 80)) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                    
                } else if (radioANBP.isSelected()) {    //radioANBP.isSelected()
                    if ((90 > v.getSystolic() || v.getSystolic() > 120) || (60 > v.getDiastolic() || v.getDiastolic() > 80)) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                }
            }
        }
        
        return finalList.isEmpty()? temp : finalList;
    }
    private Set<Patient> filterTemp(Set<Patient> temp) {
        if (tempGroup.getSelection() != null) {
            for (Patient pat : temp) {
                //last entry is chosen
                Encounter e = new ArrayList<>(pat.getVisit().keySet()).get(pat.getVisit().size() - 1);
                VitalSigns v = new ArrayList<>(pat.getVisit().values()).get(pat.getVisit().size() - 1);
                //if ("Normal".equals(tempGroup.getSelection().getActionCommand())) {
                if (radioNTemp.isSelected()) {
                    if(97.8<=v.getTemperature() && v.getTemperature()<=99.1) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                } else if (radioANTemp.isSelected()) {
                    if(97.8>v.getTemperature() || v.getTemperature()>99.1) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                }
            }
        }
        
        return finalList.isEmpty()? temp : finalList;
    }
    private Set<Patient> filterBreath(Set<Patient> temp) {
        if (breathGroup.getSelection() != null) {
            for (Patient pat : temp) {
                //last entry is chosen
                Encounter e = new ArrayList<>(pat.getVisit().keySet()).get(pat.getVisit().size() - 1);
                VitalSigns v = new ArrayList<>(pat.getVisit().values()).get(pat.getVisit().size() - 1);
                //if ("Normal".equals(breathGroup.getSelection().getActionCommand())) {
                if (radioNBreat.isSelected()) {
                    if(12<=v.getBreathing() && v.getBreathing()<=18) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                } else if (radioANBreat.isSelected()) {
                    if(12>v.getBreathing() || v.getBreathing()>18) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                }
            }
        }
        
        return finalList.isEmpty()? temp : finalList;
    }
    private Set<Patient> filterPulse(Set<Patient> temp) {
        if (pulseGroup.getSelection() != null) {
            for (Patient pat : temp) {
                //last entry is chosen
                Encounter e = new ArrayList<>(pat.getVisit().keySet()).get(pat.getVisit().size() - 1);
                VitalSigns v = new ArrayList<>(pat.getVisit().values()).get(pat.getVisit().size() - 1);
                //if ("Normal".equals(pulseGroup.getSelection().getActionCommand())) {
                if (radioNPulse.isSelected()) {
                    if(60<=v.getPulse() && v.getPulse()<=100) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                } else if (radioANPulse.isSelected()) {
                    if(60>v.getPulse() || v.getPulse()>100) {
                        //add
                        if (!finalList.contains(pat)) {
                            finalList.add(pat);
                        }
                    }
                    //dont add, remove
                    else if (finalList.contains(pat)) {
                        finalList.remove(pat);
                    }
                }
            }
        }
        
        return finalList.isEmpty()? temp : finalList;
    }
    
    private void populateFilterTable(Set<Patient> temp ) {
        DefaultTableModel model = (DefaultTableModel) tblFiltered.getModel();
        model.setRowCount(0);
        
        for (Patient patient : temp) {
            Person p = patient.getPerson();
            Encounter e = new ArrayList<>(patient.getVisit().keySet()).get(patient.getVisit().size() - 1);
            VitalSigns v = new ArrayList<>(patient.getVisit().values()).get(patient.getVisit().size() - 1);

            Object[] column = new Object[14];
            
            column[0] = patient.getPatientId();
            column[1] = p.getName();
            column[2] = p.getAge();
            column[3] = p.getHomeAddress();
            column[4] = p.getCity();
            column[5] = p.getContactDirectory();
            column[6] = p.getCommunity();
            column[7] = e.getDate();
            column[8] = e.getDoctor();
            column[9] = v.getBreathing();
            column[10] = v.getPulse();
            column[11] = v.getTemperature();
            column[12] = v.getBloodPressure();
            column[13] = v.getRemarks();

            model.addRow(column);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnClearBp;
    private javax.swing.JButton btnClearBrea;
    private javax.swing.JButton btnClearFilter;
    private javax.swing.JButton btnClearPulse;
    private javax.swing.JButton btnClearTemp;
    private javax.swing.JButton btnPrint;
    private javax.swing.JCheckBox chk019;
    private javax.swing.JCheckBox chk2030;
    private javax.swing.JCheckBox chk3140;
    private javax.swing.JCheckBox chk4150;
    private javax.swing.JCheckBox chk5160;
    private javax.swing.JCheckBox chkAbove60;
    private javax.swing.JCheckBox chkAfrican;
    private javax.swing.JCheckBox chkAmerican;
    private javax.swing.JCheckBox chkAsian;
    private javax.swing.JCheckBox chkCanadian;
    private javax.swing.JCheckBox chkLatino;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton radioANBP;
    private javax.swing.JRadioButton radioANBreat;
    private javax.swing.JRadioButton radioANPulse;
    private javax.swing.JRadioButton radioANTemp;
    private javax.swing.JRadioButton radioNBP;
    private javax.swing.JRadioButton radioNBreat;
    private javax.swing.JRadioButton radioNPulse;
    private javax.swing.JRadioButton radioNTemp;
    private javax.swing.JTable tblFiltered;
    // End of variables declaration//GEN-END:variables
}
